<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>ServiceImportExport</Name>
    <Version>6.0.0</Version>
    <Vendor>AddonsForOTRS</Vendor>
    <URL>https://otrsaddons.com/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description Lang="en">Provides ImportExportBackend for Service, SLA and Service2CustomerUsers.</Description>
    <Framework>6.0.x</Framework>
    <PackageRequired Version="5.0.1">ImportExport</PackageRequired>
	
    <CodeInstall Type="post">
    $Kernel::OM-&gt;Get('var::packagesetup::ServiceImportExport')-&gt;CodeInstall();
    
    </CodeInstall>
    <CodeUpgrade Type="post">
    $Kernel::OM-&gt;Get('var::packagesetup::ServiceImportExport')-&gt;CodeUpgrade();
    
    </CodeUpgrade>
    <CodeUninstall Type="pre">
    $Kernel::OM-&gt;Get('var::packagesetup::ServiceImportExport')-&gt;CodeUninstall();
    
    </CodeUninstall>
    <CodeReinstall Type="post">
    $Kernel::OM-&gt;Get('var::packagesetup::ServiceImportExport')-&gt;CodeReinstall();
    
    </CodeReinstall>
    <BuildDate>2015-11-17 12:18:37</BuildDate>
    <BuildHost>cvs.intra.cape-it.de</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/XML/ServiceImportExport.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjIuMCIgaW5pdD0iQXBwbGljYXRpb24iPgogICAgPENWUz4kSWQ6IFNlcnZpY2VJbXBvcnRFeHBvcnQueG1sLHYgMS4zIDIwMTMvMDIvMTggMTI6NTk6MzQgYWxpdHZpbm92YSBFeHAgJDwvQ1ZTPgogICAgPFNldHRpbmcgTmFtZT0iSW1wb3J0RXhwb3J0OjpPYmplY3RCYWNrZW5kUmVnaXN0cmF0aW9uIyMjU2VydmljZTJDdXN0b21lclVzZXIiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+T2JqZWN0IGJhY2tlbmQgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIGltcG9ydC9leHBvcnQgbW9kdWxlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPE5hdmlnYXRpb24+T2JqZWN0QmFja2VuZDo6TW9kdWxlUmVnaXN0cmF0aW9uPC9OYXZpZ2F0aW9uPgogICAgICAgIDxWYWx1ZT4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik1vZHVsZSI+S2VybmVsOjpTeXN0ZW06OkltcG9ydEV4cG9ydDo6T2JqZWN0QmFja2VuZDo6U2VydmljZTJDdXN0b21lclVzZXI8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik5hbWUiPlNlcnZpY2UyQ3VzdG9tZXJVc2VyPC9JdGVtPgogICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgPC9WYWx1ZT4KICAgIDwvU2V0dGluZz4KICAgIDxTZXR0aW5nIE5hbWU9IkltcG9ydEV4cG9ydDo6T2JqZWN0QmFja2VuZFJlZ2lzdHJhdGlvbiMjI1NlcnZpY2UiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+T2JqZWN0IGJhY2tlbmQgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIGltcG9ydC9leHBvcnQgbW9kdWxlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPE5hdmlnYXRpb24+T2JqZWN0QmFja2VuZDo6TW9kdWxlUmVnaXN0cmF0aW9uPC9OYXZpZ2F0aW9uPgogICAgICAgIDxWYWx1ZT4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik1vZHVsZSI+S2VybmVsOjpTeXN0ZW06OkltcG9ydEV4cG9ydDo6T2JqZWN0QmFja2VuZDo6U2VydmljZTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTmFtZSI+U2VydmljZTwvSXRlbT4KICAgICAgICAgICAgPC9IYXNoPgogICAgICAgIDwvVmFsdWU+CiAgICA8L1NldHRpbmc+CiAgICA8U2V0dGluZyBOYW1lPSJJbXBvcnRFeHBvcnQ6Ok9iamVjdEJhY2tlbmRSZWdpc3RyYXRpb24jIyNTTEEiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+T2JqZWN0IGJhY2tlbmQgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIGltcG9ydC9leHBvcnQgbW9kdWxlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPE5hdmlnYXRpb24+T2JqZWN0QmFja2VuZDo6TW9kdWxlUmVnaXN0cmF0aW9uPC9OYXZpZ2F0aW9uPgogICAgICAgIDxWYWx1ZT4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik1vZHVsZSI+S2VybmVsOjpTeXN0ZW06OkltcG9ydEV4cG9ydDo6T2JqZWN0QmFja2VuZDo6U0xBPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJOYW1lIj5TTEE8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1ZhbHVlPgogICAgPC9TZXR0aW5nPgogICAgPFNldHRpbmcgTmFtZT0iSW1wb3J0RXhwb3J0OjpTZXJ2aWNlSW1wb3J0RXhwb3J0OjpGb3JjZUNTVk1hcHBpbmdSZWNyZWF0aW9uIiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkRlZmluZXMgaWYgQ1NWLW1hcHBpbmdzIGFyZSByZS1jcmVhdGVkIG9uIG5leHQgcGFja2FnZSByZWluc3RhbGxhdGlvbiBvciB1cGdyYWRlIGlmIGFscmVhZHkgZXhpc3RlbnQuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8TmF2aWdhdGlvbj5TZXJ2aWNlSW1wb3J0RXhwb3J0PC9OYXZpZ2F0aW9uPgogICAgICAgIDxWYWx1ZT4KICAgICAgICAgICAgPEl0ZW0gVmFsdWVUeXBlPSJDaGVja2JveCI+MDwvSXRlbT4KICAgICAgICA8L1ZhbHVlPgogICAgPC9TZXR0aW5nPiAgIAoKPC9vdHJzX2NvbmZpZz4K</File>
        <File Location="Kernel/System/ImportExport/ObjectBackend/Service.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ImportExport/ObjectBackend/Service2CustomerUser.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ImportExport/ObjectBackend/SLA.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_ServiceImportExport.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9kZV9TZXJ2aWNlSW1wb3J0RXhwb3J0IC0gcHJvdmlkZXMgZ2VybWFuIGxhbmd1YWdlCiMgdHJhbnNsYXRpb24gZm9yIFNlcnZpY2VJbXBvcnRFeHBvcnQgbW9kdWxlCiMgQ29weXJpZ2h0IChDKSAyMDA2LTIwMTUgYy5hLnAuZS4gSVQgR21iSCwgaHR0cDovL3d3dy5jYXBlLWl0LmRlCiMgCiMgd3JpdHRlbi9lZGl0ZWQgYnk6CiMgKiBBbm5hKGRvdClMaXR2aW5vdmEoYXQpY2FwZShkYXNoKWl0KGRvdClkZQojICogVGhvbWFzKGRvdClMYW5nZShhdCljYXBlKGRhc2gpaXQoZG90KWRlCiMgLS0KIyAkSWQ6IGRlX1NlcnZpY2VJbXBvcnRFeHBvcnQucG0sdiAxLjggMjAxNS8xMS8xNyAwOTo0NTo1MSB0bGFuZ2UgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KcGFja2FnZSBLZXJuZWw6Okxhbmd1YWdlOjpkZV9TZXJ2aWNlSW1wb3J0RXhwb3J0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwp1c2UgdXRmODsKCnN1YiBEYXRhIHsKICAgIG15ICRTZWxmID0gc2hpZnQ7CgogICAgbXkgJExhbmcgPSAkU2VsZi0+e1RyYW5zbGF0aW9ufTsKCiAgICByZXR1cm4gaWYgcmVmICRMYW5nIG5lICdIQVNIJzsKCiAgICAjIHBvc3NpYmxlIGNoYXJzZXRzCiAgICAkU2VsZi0+e0NoYXJzZXR9ID0gWyd1dGYtOCcsIF07CiAgICAKICAgICMgJCRTVEFSVCQkCgogICAgIyB0cmFuc2xhdGlvbnMgbWlzc2luZyBpbiBJbXBvcnRFeHBvcnQuLi4KICAgICRMYW5nLT57J0NvbHVtbiBTZXBlcmF0b3InfSAgICAgICAgICAgPSAnU3BhbHRlbnRyZW5uZXInOwogICAgJExhbmctPnsnQ2hhcnNldCd9ICAgICAgICAgICAgICAgICAgICA9ICdaZWljaGVuc2F0eic7CiAgICAkTGFuZy0+eydSZXN0cmljdCBleHBvcnQgcGVyIHNlYXJjaCd9ID0gJ0V4cG9ydCBtaXR0ZWxzIFN1Y2hlIGVpbnNjaHLDpG5rZW4nOwoKICAgICMgc2VydmljZTJjdXN0b21lcnVzZXIgZXgtL2ltcG9ydC4uLgogICAgJExhbmctPnsnU2VydmljZSBhdmFpbGFibGUgZm9yIENVJ30gPSAnU2VydmljZSBmw7xyIEt1bmRlbm51dHplciB2ZXJmw7xnYmFyJzsKICAgICRMYW5nLT57J0N1c3RvbWVyIFVzZXIgTG9naW4nfSAgICAgID0gJ0t1bmRlbm51dHplcmxvZ2luJzsKICAgICRMYW5nLT57J1ZhbGlkaXR5IG9mIHNlcnZpY2UgYXNzaWdubWVudCBmb3IgQ1UnfSA9CiAgICAgICAgJ0fDvGx0aWdrZWl0IGRlciBTZXJ2aWNlenVvcmRudW5nIHp1IEt1bmRlbm51dHplcic7CgogICAgIyBzZXJ2aWNlIGV4LS9pbXBvcnQuLi4KICAgICRMYW5nLT57J0Z1bGwgU2VydmljZSBOYW1lJ30gICAgICAgICAgICAgICAgICA9ICdWb2xsc3TDvG5kaWdlciBTZXJ2aWNlbmFtZSc7CiAgICAkTGFuZy0+eydTaG9ydCBTZXJ2aWNlIE5hbWUnfSAgICAgICAgICAgICAgICAgPSAnS3VyenNlcnZpY2VuYW1lJzsKICAgICRMYW5nLT57J1NlcnZpY2UgVHlwZSAoSVRTTSBvbmx5KSd9ICAgICAgICAgICA9ICdTZXJ2aWNldHlwIChudXIgSVRTTSknOwogICAgJExhbmctPnsnQ3JpdGljYWxpdHkgKElUU00gb25seSknfSAgICAgICAgICAgID0gJ0tyaXRpa2FsaXTDpHQgKG51ciBJVFNNKSc7CiAgICAkTGFuZy0+eydDdXJyZW50IEluY2lkZW50IFN0YXRlIChJVFNNIG9ubHkpJ30gPSAnQWt0LiBTdMO2cnVuZ3NzdGF0dXMgKG51ciBJVFNNKSc7CiAgICAkTGFuZy0+eydDdXJyZW50IEluY2lkZW50IFN0YXRlIFR5cGUgKElUU00gb25seSknfQogICAgICAgID0gJ0FrdC4gU3TDtnJ1bmdzc3RhdHVzdHlwIChudXIgSVRTTSknOwogICAgJExhbmctPnsnRGVmYXVsdCBTZXJ2aWNlIFR5cGUnfSA9ICdTdGFuZGFyZC1TZXJ2aWNldHlwJzsKICAgICRMYW5nLT57J1ZhbGlkaXR5J30gICAgICAgICAgICAgPSAnR8O8bHRpZ2tlaXQnOwogICAgJExhbmctPnsnRGVmYXVsdCBWYWxpZGl0eSd9ICAgICA9ICdTdGFuZGFyZC1Hw7xsdGlna2VpdCc7CiAgICAkTGFuZy0+eydEZWZhdWx0IENyaXRpY2FsaXR5J30gID0gJ1N0YW5kYXJkLUtyaXRpa2FsaXTDpHQnOwoKICAgICMgU0xBIGV4LS9pbXBvcnQuLi4KICAgICRMYW5nLT57J0RlZmF1bHQgU0xBIFR5cGUnfSAgICAgICAgICAgICAgICAgICAgICAgPSAnU3RhbmRhcmQtU0xBLVR5cCc7CiAgICAkTGFuZy0+eydEZWZhdWx0IE1pbmltdW0gVGltZSBCZXR3ZWVuIEluY2lkZW50cyd9ID0gJ1N0YW5kYXJkIE1pbmltdW16ZWl0IHp3aXNjaGVuIFN0w7ZydW5nZW4nOwogICAgJExhbmctPnsnTWF4LiBudW1iZXIgb2YgY29sdW1ucyB3aGljaCBtYXkgY29udGFpbiBhc3NpZ25lZCBzZXJ2aWNlcyd9CiAgICAgICAgPSAnTWF4LiBBbnphaGwgdm9uIFNwYWx0ZW4gZGllIHp1Z2V3aWVzZW5lIFNlcnZpY2VzIGVudGhhbHRlbiBrw7ZubmVuJzsKICAgICRMYW5nLT57J01heC4gbnVtYmVyIG9mIGFzc2lnbmVkIHNlcnZpY2VzIGNvbHVtbnMnfSA9ICdNYXguIFNwYWx0ZW5hbnphaGwgenVnZXcuIFNlcnZpY2VzJzsKCiAgICAkTGFuZy0+eydTTEEgVHlwZSAoSVRTTSBvbmx5KSd9ID0gJ1NMQSBUeXAgKG51ciBJVFNNKSc7CiAgICAkTGFuZy0+eydNaW4uIFRpbWUgQmV0d2VlbiBJbmNpZGVudHMgKElUU00gb25seSknfQogICAgICAgID0gJ1N0YW5kYXJkIE1pbmltdW16ZWl0IHp3aXNjaGVuIFN0w7ZydW5nZW4gKG51ciBJVFNNKSc7CiAgICAkTGFuZy0+eydTb2x1dGlvbk5vdGlmeSAocGVyY2VudCknfSAgICAgICAgPSAnU29sdXRpb25Ob3RpZnkgKFByb3plbnQpJzsKICAgICRMYW5nLT57J1NvbHV0aW9uVGltZSAoYnVzaW5lc3MgbWludXRlcyknfSA9ICdTb2x1dGlvblRpbWUgKEdlc2Now6RmdHNtaW51dGVuKSc7CiAgICAkTGFuZy0+eydVcGRhdGVOb3RpZnkgKHBlcmNlbnQpJ30gICAgICAgICAgPSAnVXBkYXRlTm90aWZ5IChQcm96ZW50KSc7CiAgICAkTGFuZy0+eydVcGRhdGVUaW1lIChidXNpbmVzcyBtaW51dGVzKSd9ICAgPSAnVXBkYXRlVGltZSAoR2VzY2jDpGZ0c21pbnV0ZW4pJzsKICAgICRMYW5nLT57J0ZpcnN0UmVzcG9uc2VOb3RpZnkgKHBlcmNlbnQpJ30gICA9ICdGaXJzdFJlc3BvbnNlTm90aWZ5IChQcm96ZW50KSc7CiAgICAkTGFuZy0+eydGaXJzdFJlc3BvbnNlVGltZSAoYnVzaW5lc3MgbWludXRlcyknfQogICAgICAgID0gJ0ZpcnN0UmVzcG9uc2VUaW1lIChHZXNjaMOkZnRzbWludXRlbiknOwogICAgJExhbmctPnsnQ2FsZW5kYXIgTmFtZSd9ID0gJ0thbGVuZGVybmFtZSc7CgogICAgJExhbmctPnsnRXhwb3J0IHdpdGggbGFiZWxzJ30gPSAnTWl0IEJlc2NocmlmdHVuZyBleHBvcnRpZXJlbic7CgogICAgIyBTeXNDb25maWcgZGVzY3JpcHRpb25zCiAgICAkTGFuZy0+eydPYmplY3QgYmFja2VuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgaW1wb3J0L2V4cG9ydCBtb2R1bHMuJ30gPQogICAgICAgICdPYmpla3QtQmFja2VuZCBNb2R1bCBSZWdpc3RyYXRpb24gZGVzIEltcG9ydC9FeHBvcnQgTW9kdWxzLic7CgogICAgIyAgICRMYW5nLT57Jyd9ID0gJyc7CgogICAgcmV0dXJuIDA7CgogICAgIyAkJFNUT1AkJAp9CgoxOw==</File>
        <File Location="var/packagesetup/ServiceImportExport.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
</otrs_package>